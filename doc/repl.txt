*repl.txt* A Neovim REPL manager

Author: Samuel Roeca

Table of Contents

1. Introduction ... |repl_intro|
2. Configuration .. |repl_configuration|
3. Commands ....... |repl_commands|
4. Mappings ....... |repl_mappings|
5. Credits ........ |repl_credits|

==============================================================================
                                                                   *repl_intro*
1. INTRODUCTION~

nvim-repl makes it easy to create, use, and remove an interactive REPL within
Neovim. It uses a Neovim-specific api and is only intended to be used with the
latest version of Neovim (0.5.0+).

==============================================================================
                                                           *repl_configuration*
2. CONFIGURATION~

*g:repl_filetype_commands*
Type: Dictionary[String, String]
Default: defined in plugin/repl.vim

Map a filetype to a REPL starting command using this configuration variable.
Eg, if you automatically want to run a "python" REPL for python filetypes and
a "node" REPL for javascript filetypes, your configuration might look like
this: >vim

  let g:repl_filetype_commands = {
        \ 'bash': 'bash',
        \ 'javascript': 'node',
        \ 'haskell': 'ghci',
        \ 'python': 'ipython --quiet --no-autoindent'
        \ 'r': 'R',
        \ 'sh': 'sh',
        \ 'vim': 'nvim --clean -ERM',
        \ 'zsh': 'zsh',
        \ }

*g:repl_default*
Type: String
Default: &shell

The default REPL selected. Used when no configured REPL is found for a
particular filetype.

*g:repl_split*
Type: String
Default: 'vertical'

Set the split position of REPL window. Default will split vertically. Vertical
and horizontal respect the user-configured global splitright and splitbottom
settings.

Available options: >

  - `bottom`
  - `top`
  - `left`
  - `right`
  - `horizontal`
  - `vertical`

*g:repl_height*
Type: Number
Default: ''

Set REPL window's height (number of lines) if `g:repl_split` set `bottom` / `top`.

*g:repl_width*
Type: Number
Default: ''

Set REPL window's width (number of columns) if `g:repl_split` set `left` / `right`.

==============================================================================
                                                                *repl_commands*
3. COMMANDS~

*:Repl* *:ReplOpen*
  open the REPL. Takes the name of an executable REPL as an optional argument.
  If no argument is provided, defaults to either the filetype-associated REPL
  or the configured default REPL.
*:ReplClose*
  close the REPL, if open.
*:ReplToggle*
  if REPL is open, close it. If REPL is closed, open it using either the
  filetype-associated REPL or the configured default REPL.
*:ReplClear*
  clear on open REPL's screen. Similar to the bash command clear(1). Note:
  only works if the REPL supports "<C-l>" as a screen-clearning mechanism.
*:ReplRunCell*
  run the cell starting with '# %%', and jump the cursor the next cell
*:ReplSendArgs*
  send the arguments passed to the command directly to the REPL.

==============================================================================
                                                                *repl_mappings*
4. MAPPINGS~

Two pluggable, dot-repeatable mappings are provided:

<Plug>*(ReplSendLine)* send the current line to the REPL.
<Plug>*(ReplSendVisual)* send the current cell to the REPL.
<Plug>*(ReplSendCell)* send the visual selection to the REPL.

The user should map these pluggable mappings. Our recommended mappings: >vim

  nmap     <Leader>c  <Plug>(ReplSendCell)
  nmap     <Leader>r  <Plug>(ReplSendLine)
  xmap     <Leader>r  <Plug>(ReplSendVisual)

Note: as always, pluggable mappings require a recursive mapping. Eg, don't try
to "nnoremap" a pluggable mapping. It won't work.

==============================================================================
                                                                 *repl_credits*
5. CREDITS~

This plugin was inspired by vim-slime: https://github.com/jpalardy/vim-slime .

Samuel Roeca heavily modified that program to the point where it has become
its own plugin.

vim:tw=78:ts=8:ft=help:norl:
