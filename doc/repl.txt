*repl.txt* A Neovim REPL manager

Author: Samuel Roeca

Table of Contents

1. Introduction ... |repl_intro|
2. Configuration .. |repl_configuration|
3. Commands ....... |repl_commands|
4. Mappings ....... |repl_mappings|
5. Credits ........ |repl_credits|

==============================================================================
                                                                   *repl_intro*
1. INTRODUCTION~

Create, use, and remove interactive REPLs within Neovim.

==============================================================================
                                                           *repl_configuration*
2. CONFIGURATION~

*g:repl_filetype_commands*
Type: Dictionary[String, String | Dict[String | String]]
Default: defined in plugin/repl.vim

Map a filetype to a REPL starting command using this configuration variable.
Eg, if you automatically want to run a "python" REPL for python filetypes and
a "node" REPL for javascript filetypes, your configuration might look like
this: >vim

  let g:repl_filetype_commands = {
        \ 'bash': 'bash',
        \ 'javascript': 'node',
        \ 'haskell': 'ghci',
        \ 'ocaml': #{cmd: 'utop', repl_type: 'utop'},
        \ 'python': #{cmd: 'ipython --no-autoindent', repl_type: 'ipython'},
        \ 'r': 'R',
        \ 'sh': 'sh',
        \ 'vim': 'nvim --clean -ERM',
        \ 'zsh': 'zsh',
        \ }

A filetype's repl value can be a String or a Dict. If it's a Dict, acceptable
keys are:

- `cmd` the command to start the repl. The command can be multiple words (for
  example, including `conda activate`) if escaped properly.
- `repl_type` unlocks different repl behaviors ('' uses default behavior).
  Supported repl types are:
  - `default`: sends lines, 1 at a time, to the repl for evaluation.
  - `ipython`: similar to default, but enters ipython's special multiline mode
    with <C-o> if more than 1 line is sent to the repl.
  - `utop`: adds `;;` to the end of the text that is sent to the repl.
- `open_window` same as `g:repl_open_window_default`, but specific to
  configured repl.

If its value is a String, the value is the `cmd`. All other options are `''`.

*g:repl_default*
Type: String | Dict[String | Dict]
Default: &shell

The default REPL selected. Used when no configured REPL is found for a
particular filetype. This has the same type and behavior as the values for
`g:repl_filetype_commands`.

*g:repl_open_window_default*
Type: String
Default: `vertical split new`

Default Vim command used to open the repl window. Uses Vim's built-in commands
for maximum flexibility.

Examples: >

  - Vertical split (default): `vertical split new`
  - Vertical split with width of 79 specified: `vertical 79split new`
  - Left split: `leftabove vertical split new`
  - See `:help opening-window` for additional options

Set REPL window's width (number of columns) if `g:repl_split` set `left` / `right`.

==============================================================================
                                                                *repl_commands*
3. COMMANDS~

*:Repl* *:ReplOpen*

  Open a terminal and run the repl. All arguments are optional; no arguments
  default to the values set in `g:repl_filetype_commands`.

  - `arg1-cmd` the command to start the repl. The command can be multiple
    words (for example, including `conda activate`) if enclosed in single
    quotes.
  - `arg2-prefix` text that precenes all commands sent to the repl ('' to
    skip).
  - `arg3-suffix` text that follows all commands sent to the repl ('' to
    skip). Useful for ocaml.

*:ReplAttach*

  Attach to an existing, open terminal. Enables multiple buffers to
  communicate with one terminal.

*:ReplClose*

  Close the REPL, if open.

*:ReplToggle*

  If REPL is open, close it. If REPL is closed, open it using either the
  filetype-associated REPL or the configured default REPL.

*:ReplClear*

  Clear on open REPL's screen. Similar to the bash command clear(1). Note:
  only works if the REPL supports "<C-l>" as a screen-clearning mechanism.

*:ReplRunCell*

  Run the cell, and jump the cursor the next cell

*:ReplNewCell*

  Create a new cell

*:ReplSendArgs*

  Send the arguments passed to the command directly to the REPL.

==============================================================================
                                                              *repl_functions*
3. FUNCTIONS~

Most users will use the commands above. That said, some public functions may
be useful if you need to further customize your environment.

*repl#open*
Type: Callable[[repl_config?]]
Default: `vertical split new`

  Used to open a repl. Can be called with either 0 or 1 arguments.

==============================================================================
                                                                *repl_mappings*
5. MAPPINGS~

Pluggable, dot-repeatable mappings are provided for the use to map:

<Plug>(ReplSendLine)                                      *<Plug>(ReplSendLine)*

  Send the current line to the REPL.

<Plug>(ReplSendVisual)                                  *<Plug>(ReplSendVisual)*

  Send the current cell to the REPL.

<Plug>(ReplSendCell)                                      *<Plug>(ReplSendCell)*

  Send the visual selection to the REPL.

Our recommended mappings: >vim

  nnoremap <Leader>cc <Cmd>ReplNewCell<CR>
  nmap <silent> <Leader>cr <Plug>(ReplSendCell)
  nmap <silent> <Leader>r <Plug>(ReplSendLine)
  xmap <silent> <Leader>r <Plug>(ReplSendVisual)

Note: pluggable mappings require a recursive mapping. Eg, don't try to
"nnoremap" a pluggable mapping. It won't work.

==============================================================================
                                                                 *repl_credits*
5. CREDITS~

This plugin was inspired by vim-slime: https://github.com/jpalardy/vim-slime .

Samuel Roeca heavily modified that program to the point where it has become
its own plugin.

vim:tw=78:ts=8:ft=help:norl:
