*repl.txt* A Neovim REPL manager

Author: Samuel Roeca

Table of Contents

1. Introduction ... |repl_intro|
2. Configuration .. |repl_configuration|
3. Commands ....... |repl_commands|
4. Mappings ....... |repl_mappings|
5. Credits ........ |repl_credits|

==============================================================================
                                                                   *repl_intro*
1. INTRODUCTION~

Create, use, and remove interactive REPLs within Neovim.

Works with any REPL, but contains custom support for the following REPLs:

- ipython: https://ipython.readthedocs.io/en/stable
- aider: https://aider.chat
- utop: https://opam.ocaml.org/blog/about-utop

==============================================================================
                                                           *repl_configuration*
2. CONFIGURATION~

*g:repl_filetype_commands*
Type: Dictionary[String, String | Dict[String | String]]
Default: defined in plugin/repl.vim

Map a filetype to a REPL starting command using this configuration variable.
Your configuration might look like this: >vim

  let g:repl_filetype_commands = {
        \ 'bash': 'bash',
        \ 'javascript': 'node',
        \ 'haskell': 'ghci',
        \ 'ocaml': #{cmd: 'utop', repl_type: 'utop'},
        \ 'r': 'R',
        \ 'sh': 'sh',
        \ 'vim': 'nvim --clean -ERM',
        \ 'zsh': 'zsh',
        \ }

A filetype's REPL value can be a String or a Dict. If it's a Dict, acceptable
keys are:

- `cmd` the command to start the REPL. The command can be multiple words (for
  example, including `conda activate`) if escaped properly.
- `repl_type` unlocks different REPL behaviors ('' uses default behavior).
  Supported REPL types are:
  - `''`: the default. Sends lines, 1 at a time, to the REPL for evaluation.
  - `'aider'`: an AI REPL. Supports additional aider-specific commands.
  - `'ipython'`: similar to default, but enters ipython's special multiline mode
    with <C-o> if more than 1 line is sent to the REPL.
  - `'utop'`: adds `;;` to the end of the text that is sent to the REPL.
- `open_window` same as `g:repl_open_window_default`, but specific to
  configured REPL.

If its value is a String, the value is the `cmd`. All other options are `''`.

*g:repl_default*
Type: String | Dict[String | Dict]
Default: &shell

The default REPL selected. Used when no configured REPL is found for a
particular filetype. This has the same type and behavior as the values for
`g:repl_filetype_commands`.

*g:repl_open_window_default*
Type: String
Default: `vertical split new`

Default Vim command used to open the REPL window. Uses Vim's built-in commands
for maximum flexibility.

Examples: >

  - Vertical split (default): `vertical split new`
  - Vertical split with width of 79 specified: `vertical 79split new`
  - Left split: `leftabove vertical split new`
  - See `:help opening-window` for additional options

Set REPL window's width(number of columns) if `g:repl_split` set `left` / `right`.

==============================================================================
                                                                *repl_commands*
3. COMMANDS~

Unless otherwise specified, assume a command takes 0 arguments.

*:Repl*

  Open a terminal and run the REPL. Takes 0 or 1 arguments. If provided, the
  argument has the same type as non-key values in `g:repl_filetype_commands`.

*:ReplAttach*

  Attach to an existing, open terminal. Enables multiple buffers to
  communicate with one terminal.

*:ReplClose*

  Close the REPL, if open.

*:ReplToggle*

  If REPL is open, close it. If REPL is closed, open it using either the
  filetype-associated REPL or the configured default REPL.

*:ReplClear*

  Clear on open REPL's screen. Similar to the bash command clear(1). Note:
  only works if the REPL supports "<C-l>" as a screen-clearning mechanism.

*:ReplRunCell*

  Run the cell, and jump the cursor the next cell.

*:ReplNewCell*

  Create a new cell.

*:ReplSend*

  Send the arguments passed to the command directly to the REPL. Takes 0 or 1
  arguments.

  If no arguments are provided, opens a floating window that can accept
  multiple lines. When the window is closed, the lines are sent to the REPL.

  If an argument is provided, then the full text of the argument is sent to
  the REPL.

*:ReplAider*

  Like :Repl, but only open an aider repl.

*:ReplAiderBufCur*

  Adds, or drops, the current buffer from the attached aider REPL.
  Takes 1 argument: either `/add` or `/drop`.

*:ReplAiderBufAll*

  Adds, or drops, all open buffers from the attached aider REPL.
  Takes 1 argument: either `/add` or `/drop`.

==============================================================================
                                                                *repl_mappings*
4. MAPPINGS~

Pluggable, dot-repeatable mappings are provided for the use to map:

<Plug>(ReplSendLine)                                      *<Plug>(ReplSendLine)*

  Send the current line to the REPL.

<Plug>(ReplSendVisual)                                  *<Plug>(ReplSendVisual)*

  Send the current cell to the REPL.

<Plug>(ReplSendCell)                                      *<Plug>(ReplSendCell)*

  Send the visual selection to the REPL.

Some recommended mappings that you may add want to add to your configuration: >vim

  nmap <silent> <Leader>rr <Plug>(ReplSendLine)
  xmap <silent> <Leader>r <Plug>(ReplSendVisual)
  nmap <silent> <Leader>rc <Plug>(ReplSendCell)
  nnoremap <Leader>rs <Cmd>ReplSend<CR>
  nnoremap <Leader>ra <Cmd>ReplAiderBufCur /add<CR>

Note: pluggable mappings require a recursive mapping. Eg, don't try to
"nnoremap" a pluggable mapping. It won't work.

==============================================================================
                                                                  *repl_cells*
5. CELLS~

Cells are denoted by full-line comments that begin with the characters `%%`.

Comments are identified by your buffer's filetype's 'commentstring'.

See some examples below:

Python: >python

  # %%
  print("I am the first cell")
  print("I am still the first cell")

  # %% anything can follow
  print("I am the second cell")
  print("I am still the second cell")
  print("I am still, still the second cell")
  # %%

  print("I am the third cell")

Haskell: >haskell

  -- %%
  putStrLn "I am the first cell"
  putStrLn "I am still the first cell"

  -- %% anything can follow
  putStrLn "I am the second cell"
  putStrLn "I am still the second cell"
  putStrLn "I am still, still the second cell"
  -- %%

  putStrLn "I am the third cell"


==============================================================================
                                                                 *repl_credits*
6. CREDITS~

This plugin was inspired by vim-slime: https://github.com/jpalardy/vim-slime .

vim:tw=78:ts=8:ft=help:norl:
